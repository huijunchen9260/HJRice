
global !p
texMathZones = ['texMathZone'+x for x in ['A', 'AS', 'B', 'BS', 'C', 'CS', 'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS', 'J', 'JS', 'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z']]

texIgnoreMathZones = ['texMathText']

texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")

ignore = texIgnoreMathZoneIds[0]

def math():
	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
	try:
		first = next(i for i in reversed(synstackids) if i in texIgnoreMathZoneIds or i in texMathZoneIds)
		return first != ignore
	except StopIteration:
		return False
endglobal

global !p
def create_matrix(snip):

        matrix_str = (snip.buffer[snip.line].split('mat')[0]+'matrix').strip()

        rows = 'x'.join(snip.buffer[snip.line].split("x", 2)[:-1])
        cols = 'x'.join(snip.buffer[snip.line].split("x", 2)[-1:])

        int_val = lambda string: int(''.join(s for s in string if s.isdigit()))

        rows = int_val(rows)
        cols = int_val(cols)

        offset = cols + 1

        line = snip.buffer[snip.line]
        old_spacing = line[:len(line) - len(line.lstrip()) ]

        snip.buffer[snip.line] = ''

        final_str = old_spacing + "\\begin{"+matrix_str+"}${1:[$2]}\n"

        for i in range(rows):
                final_str += old_spacing + '\t'
                final_str += " & ".join(['$' + str(i * cols + j + offset + 2) for j in range(cols)])

                final_str += " \\\\\\\n"

        final_str = final_str[:-4] + '\n'

        final_str += old_spacing + "\\end{"+matrix_str+"}"

        snip.expand_anon(final_str)

endglobal

global !p
def create_inline_matrix(snip):

        until = int(snip.cursor[1])
        rest = snip.buffer[snip.line][until:]
        given_i = snip.buffer[snip.line][0:until].rfind('i')
        given = snip.buffer[snip.line][given_i:until]

        # I don't think we'll be dealing with matricies over 1 digit in size...
        rows = int(given.split("x", 2)[0][-1])
        cols = int(given.split("x", 2)[-1][0])

        offset = cols + 3

        snip.buffer[snip.line] = snip.buffer[snip.line][0:until - 7]

        final_str = "\\mat ${1:[$2]}{"

        for i in range(rows):
                final_str += ' '
                final_str += " & ".join(['$' + str(i * cols + j + offset) for j in range(cols)])
                final_str += " \\\\\\"

        final_str = final_str[:-3] +  "}$0"
        final_str += rest

        snip.expand_anon(final_str)

endglobal

global !p
def add_row(snip):
	row_len = int(''.join(s for s in snip.buffer[snip.line] if s.isdigit()))
	old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('\t') + 1]

	snip.buffer[snip.line] = ''

	final_str = old_spacing
	final_str += " & ".join(['$' + str(j + 1) for j in range(row_len)])
	final_str += " \\\\\\"

	snip.expand_anon(final_str)
endglobal

global !p
def test(snip):

        line = snip.buffer[snip.line]
        old_spacing = line[:len(line) - len(line.lstrip()) ]

        snip.buffer[snip.line] = ''

        final_str = old_spacing + "<<- spacing?, line ->>"

        snip.expand_anon(final_str)
endglobal


snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

snippet dm "Math" wA
%
\[
	${1:${VISUAL}}
${2:.}\]
%
$0
endsnippet


##############
#  Matrices  #
##############

context "math()"
pre_expand "create_matrix(snip)"
snippet "[^i]mat(rix)?(\d+)x(\d+)" "Generate (small|[bBpvV])?matrix of *rows* by *columns*" ir
endsnippet

context "math()"
pre_expand "create_inline_matrix(snip)"
snippet "imat(rix)?(\d+)x(\d+)" "Generate (small|[bBpvV])?matrix of *rows* by *columns*" ir
endsnippet

context "math()"
pre_expand "test(snip)"
snippet "(small|[gbBpvV])?ghp(rix)?(\d+)x(\d+)" "Generate (small|[bBpvV])?matrix of *rows* by *columns*" ir
endsnippet

pre_expand "add_row(snip)"
snippet "tr(\d+)" "Add table row of dimension ..." r
endsnippet

snippet pmat "pmat" wi
\begin{pmatrix} $1 \end{pmatrix} $0
endsnippet

snippet bmat "bmat" wi
\begin{bmatrix} $1 \end{bmatrix} $0
endsnippet
##############
#  Equation  #
##############

snippet eq "Equation environment" b
%
\begin{equation}
	${1:${VISUAL}}
${2:.}\end{equation}
%
$0
endsnippet

context "math()"
snippet sp "Split equation environment" b
\begin{split}
	$1 & $2 \\\\ $3
\end{split}
endsnippet


######################
#  Symbolic snippet  #
######################



snippet => "implies" Ai
 \implies $0
endsnippet

snippet =< "implied by" Ai
 \impliedby $0
endsnippet

context "math()"
snippet iff "iff" Ai
 \iff $0
endsnippet


snippet == "equals" iA
 &= $1 \\\\
endsnippet

snippet != "equals" iA
 \neq $0
endsnippet
##############
#  Fraction  #
##############


context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2} $0
endsnippet

snippet / "Fraction" i
\\frac{${VISUAL}}{$1} $0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol frac" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1} $0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() frac" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

snippet part "d/dx" w
\frac{\partial ${2:V}}{\partial ${3:x}} $0
endsnippet

snippet deriv "d/dx" w
\frac{d ${1:V}}{d ${2:x}} $0
endsnippet
# context "math()"
# snippet '([A-Za-z])(\d)' "auto subscript" wrA
# `!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
# endsnippet

# context "math()"
# snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
# `!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
# endsnippet

###########
#  Sympy  #
###########


snippet sympy "sympyblock " w
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '').replace('^', '**').replace('{', '(').replace('}', ')') + ')')
`
endsnippet

#################
#  Mathematica  #
#################


priority 1000
snippet math "mathematicablock" w
math $1 math$0
endsnippet

priority 10000
snippet 'math(.*)math' "math" wr
`!p
import subprocess
code = match.group(1)
code = 'ToString[' + code + ', TeXForm]'
snip.rv = subprocess.check_output(['wolframscript', '-code', code])
`
endsnippet

#################
#  Surrounding  #
#################


context "math()"
snippet ceil "ceil" iA
\left\lceil $1 \right\rceil $0
endsnippet

context "math()"
snippet floor "floor" iA
\left\lfloor $1 \right\rfloor $0
endsnippet

context "math()"
snippet () "left( right)" iA
\left( ${1:${VISUAL}} \right) $0
endsnippet

context "math()"
snippet lr "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

context "math()"
snippet lr( "left( right)" iA
\left( ${1:${VISUAL}} \right) $0
endsnippet

context "math()"
snippet lr| "left| right|" iA
\left| ${1:${VISUAL}} \right| $0
endsnippet

# context "math()"
# snippet lr{ "left\{ right\}" iA
# \left\\{ ${1:${VISUAL}} \right\\} $0
# endsnippet

context "math()"
snippet lrb "left\{ right\}" iA
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

context "math()"
snippet lr[ "left[ right]" iA
\left[ ${1:${VISUAL}} \right] $0
endsnippet

context "math()"
snippet lra "leftangle rightangle" iA
\left<${1:${VISUAL}} \right> $0
endsnippet

context "math()"
snippet conj "conjugate" iA
\overline{$1} $0
endsnippet

##############
#  Operator  #
##############


snippet dint "integral" w
\int_{${1:-\infty}}^{${2:\infty}} ${3:${VISUAL}} $0
endsnippet

# snippet sum "sum" w
# \sum_{n=${1:0}}^{${3:\infty}} ${4:${VISUAL}} $0
# endsnippet

snippet sum "sum" w
\sum_{${1:n}=${2:1}}^{${3:\infty}} ${4:a_n z^n} $0
endsnippet

snippet taylor "taylor" w
\sum_{${1:k}=${2:0}}^{${3:\infty}} ${4:c_$1} (x-a)^$1 $0
endsnippet

snippet lim "limit" w
\lim_{${1:n} \to ${2:\infty}}
endsnippet

snippet max "max" w
\max_{${1:n}} $0
endsnippet

snippet min "min" w
\min_{${1:n}} $0
endsnippet

snippet limsup "limsup" w
\limsup_{${1:n} \to ${2:\infty}}
endsnippet

snippet prod "product" w
\prod_{${1:n=${2:1}}}^{${3:\infty}} ${4:${VISUAL}} $0
endsnippet

context "math()"
snippet sq "\sqrt{}" iA
\sqrt{${1:${VISUAL}}} $0
endsnippet

#######################
#  Sub / Superscript  #
#######################


context "math()"
snippet invs "inverse" iA
^{-1} $0
endsnippet

context "math()"
snippet compl "complement" iA
^{c} $0
endsnippet

context "math()"
snippet sr "^2" iA
^2 $0
endsnippet

context "math()"
snippet cb "^3" iA
^3 $0
endsnippet

context "math()"
snippet td "to the ... power" iA
^{$1} $0
endsnippet

context "math()"
snippet rd "to the ... power" iA
^{($1)} $0
endsnippet

snippet rij "mrij" i
(${1:x}_${2:n})_{${3:$2}\\in${4:\\N}}$0
endsnippet


context "math()"
snippet xnn "xn" iA
x_{n} $0
endsnippet

context "math()"
snippet ynn "yn" iA
y_{n} $0
endsnippet


context "math()"
snippet xii "xi" iA
x_{i} $0
endsnippet

context "math()"
snippet yii "yi" iA
y_{i} $0
endsnippet

context "math()"
snippet xjj "xj" iA
x_{j} $0
endsnippet

context "math()"
snippet yjj "yj" iA
y_{j} $0
endsnippet

context "math()"
snippet xp1 "x" iA
x_{n+1} $0
endsnippet

context "math()"
snippet xmm "x" iA
x_{m} $0
endsnippet

snippet R0+ "R0+" iA
\mathbb{R}_0^+ $0
endsnippet

snippet plot "Plot" w
\begin{figure}[$1]
	\centering
	\begin{tikzpicture}
		\begin{axis}[
			xmin= ${2:-10}, xmax= ${3:10},
			ymin= ${4:-10}, ymax = ${5:10},
			axis lines = middle,
		]
			\addplot[domain=$2:$3, samples=${6:100}]{$7};
		\end{axis}
	\end{tikzpicture}
	\caption{$8}
	\label{${9:$8}}
\end{figure}
endsnippet

snippet nn "Tikz node" w
\node[$5] (${1/[^0-9a-zA-Z]//g}${2}) ${3:at (${4:0,0}) }{$${1}$};
$0
endsnippet

# snippet * "cdot" iA
# \cdot
# endsnippet

# priority 200
# snippet '\cdot *' "cdot" iA
# *
# endsnippet

context "math()"
snippet norm "norm" iA
\|$1\| $0
endsnippet

priority 100
context "math()"
snippet -> "to" iA
\to $0
endsnippet

priority 200
context "math()"
snippet <-> "leftrightarrow" iA
\leftrightarrow $0
endsnippet

context "math()"
snippet !> "mapsto" iA
\mapsto $0
endsnippet


context "math()"
snippet \\\ "setminus" iA
\setminus $0
endsnippet

snippet >> ">>" iA
\gg $0
endsnippet

snippet << "<<" iA
\ll $0
endsnippet

snippet DD "delta" iA
\Delta
endsnippet

snippet ~~ "~" iA
\sim
endsnippet

context "math()"
snippet set "set" wA
\\{$1\\} $0
endsnippet

snippet || "mid" iA
 \mid $0
endsnippet



context "math()"
snippet '(?<!i)sts' "text subscript" irA
_\text{$1} $0
endsnippet

context "math()"
snippet tt "text" iA
\text{$1}$0
endsnippet

context "math()"
snippet case "cases" wA
\begin{cases}
	$1
\end{cases}
endsnippet

#############
#  Spacing  #
#############

context "math()"
snippet '([ ]?)(_)' "subscript" wrA
`!p snip.rv = match.group(2)`{$1} $0
endsnippet

context "math()"
snippet '([ ]?)(\^)' "superscript" wrA
`!p snip.rv = match.group(2)`{$1} $0
endsnippet

snippet '([ ]?)([,])' "good comma" wrA
`!p snip.rv = match.group(2)` $0
endsnippet

# For some unknown reason, '=' need to be put in in the front
# context "math()"
# snippet '([=+-])(([\\]?)([A-Za-z0-9]+))' "post auto spacing for =, +, -" wirA
# `!p snip.rv = match.group(1)` `!p snip.rv = match.group(2)`$0
# endsnippet

# context "math()"
# snippet '([A-Za-z0-9]+)([=+-])' "pre auto spacing for =, +, -" wirA
# `!p snip.rv = match.group(1)` `!p snip.rv = match.group(2)`$0
# endsnippet

# context "math()"
# snippet '([<>])(([\\]?)([A-Za-z0-9]+))' "post auto spacing for <, >" wirA
# `!p snip.rv = match.group(1)` `!p snip.rv = match.group(2)`$0
# endsnippet

# context "math()"
# snippet '([A-Za-z0-9]+)([<>])' "pre auto spacing for <, >" wirA
# `!p snip.rv = match.group(1)` `!p snip.rv = match.group(2)`$0
# endsnippet

context "math()"
snippet ooo "\infty" iA
 \infty
endsnippet

context "math()"
snippet rij "mrij" i
(${1:x}_${2:n})_{${3:$2}\\in${4:\\N}} $0
endsnippet

context "math()"
snippet <= "leq" iA
 \le $0
endsnippet

context "math()"
snippet >= "geq" iA
 \ge $0
endsnippet

context "math()"
snippet EE "geq" iA
 \exists $0
endsnippet

context "math()"
snippet AA "forall" iA
 \forall $0
endsnippet

context "math()"
snippet xnn "xn" iA
 x_{n} $0
endsnippet

context "math()"
snippet ynn "yn" iA
 y_{n} $0
endsnippet


context "math()"
snippet xii "xi" iA
 x_{i} $0
endsnippet

context "math()"
snippet yii "yi" iA
 y_{i} $0
endsnippet

context "math()"
snippet xjj "xj" iA
 x_{j} $0
endsnippet

context "math()"
snippet yjj "yj" iA
 y_{j} $0
endsnippet

context "math()"
snippet xp1 "x" iA
 x_{n+1} $0
endsnippet

context "math()"
snippet xmm "x" iA
 x_{m} $0
endsnippet

context "math()"
snippet Rn+ "Rn+" iA
 \mathbb{R}_+^n $0
endsnippet

snippet plot "Plot" w
\begin{figure}[$1]
	\centering
	\begin{tikzpicture}
		\begin{axis}[
			xmin= ${2:-10}, xmax= ${3:10},
			ymin= ${4:-10}, ymax = ${5:10},
			axis lines = middle,
		]
			\addplot[domain=$2:$3, samples=${6:100}]{$7};
		\end{axis}
	\end{tikzpicture}
	\caption{$8}
	\label{${9:$8}}
\end{figure}
endsnippet

snippet nn "Tikz node" w
 \node[$5] (${1/[^0-9a-zA-Z]//g}${2}) ${3:at (${4:0,0}) }{$${1}$};
$0
endsnippet

context "math()"
snippet mcal "mathcal" iA
 \mathcal{$1}$0
endsnippet

snippet lll "l" iA
 \ell $0
endsnippet

context "math()"
snippet nabl "nabla" iA
 \nabla $0
endsnippet

context "math()"
snippet xx "cross" iA
 \times $0
endsnippet


priority 100
context "math()"
snippet c.. "cdots" iA
 \cdots $0
endsnippet

context "math()"
snippet v.. "vdots" iA
 \vdots $0
endsnippet

context "math()"
snippet l.. "ldots" iA
 \ldots $0
endsnippet

context "math()"
snippet d.. "ddots" iA
 \ddots $0
endsnippet

context "math()"
snippet ... "cdot" iA
 \cdot $0
endsnippet

# priority 200
# snippet '\cdot *' "cdot" iA
# *
# endsnippet

priority 100
context "math()"
snippet '(?<!\\)(sin|cos|arccot|cot|csc|ln|log|exp|star|perp|equiv)' "ln" rwA
 \\`!p snip.rv = match.group(1)` $0
endsnippet

priority 200
context "math()"
snippet '(?<!\\)(arcsin|arccos|arctan|arccot|arccsc|arcsec|int)' "ln" rwA
 \\`!p snip.rv = match.group(1)` $0
endsnippet


context "math()"
snippet cc "strict subset" iA
 \subset $0
endsnippet

context "math()"
snippet c= "subset" iA
 \subseteq $0
endsnippet

priority 10
context "math()"
snippet inn "in " iA
 \in $0
endsnippet

context "math()"
snippet cap "cap" iA
 \cap $0
endsnippet

context "math()"
snippet cup "cup" iA
 \cup $0
endsnippet

context "math()"
snippet uuu "bigcup" iA
 \bigcup_{${1:i \in ${2: I}}} $0
endsnippet

context "math()"
snippet nnn "bigcap" iA
 \bigcap_{${1:i \in ${2: I}}} $0
endsnippet

context "math()"
snippet OO "emptyset" iA
 \emptyset $0
endsnippet

# Number set

context "math()"
snippet RrR "real" iA
 \mathbb{R} $0
endsnippet

context "math()"
snippet NnN "n" iA
 \mathbb{N} $0
endsnippet

context "math()"
snippet QqQ "Q" iA
 \mathbb{Q} $0
endsnippet

context "math()"
snippet ZzZ "Z" iA
 \mathbb{Z} $0
endsnippet

context "math()"
snippet PpP "P" iA
 \mathbb{P} $0
endsnippet

context "math()"
snippet CcC "C" iA
 \mathbb{C} $0
endsnippet

context "math()"
snippet IiI "I" iA
 \mathbb{I} $0
endsnippet

snippet <! "normal" iA
 $\triangleleft$ $0
endsnippet

snippet <^> "hokje" iA
 $\diamond$ $0
endsnippet


context "math()"
snippet '(?<!i)sts' "text subscript" irA
_\text{$1} $0
endsnippet

context "math()"
snippet case "cases" wA
 \begin{cases}
	$1
 \end{cases}
endsnippet

snippet SI "SI" iA
 \SI{$1}{$2} $0
endsnippet

snippet bigfun "Big function" iA
\begin{align*}
	$1: $2 &\longrightarrow $3 \\\\
	$4 &\longmapsto $1($4) = $0
.\end{align*}
endsnippet

snippet cvec "column vector" iA
\begin{pmatrix} ${1:x}_${2:1}\\\\ \vdots\\\\ $1_${2:n} \end{pmatrix}
endsnippet

priority 10
context "math()"
snippet "bar" "bar" riA
 \overline{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])bar" "bar" riA
 \overline{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "hat" "hat" riA
 \hat{$1} $0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])hat" "hat" riA
 \hat{`!p snip.rv=match.group(1)`} $0
endsnippet

priority 10
context "math()"
snippet "tilde" "widetilde" riA
 \tilde{$1} $0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])tilde" "tilde" riA
 \tilde{`!p snip.rv=match.group(1)`} $0
endsnippet
snippet letw "let omega" iA
Let $\Omega \subset \C$ be open.
endsnippet

context "math()"
snippet tt "Text in math" iA
 \text{$1 }$0
endsnippet


#######################################################################
#                            Greek Letters                            #
#######################################################################

# priority 200
# context "math()"
# snippet '(?<!\\)(alpha|beta|gamma|delta|epsilon|zeta|eta)' "Greek" rwA
#  \\`!p snip.rv = match.group(1)` $0
# endsnippet


# priority 200
# context "math()"
# snippet '(?<!\\)(theta|iota|kappa|lambda|mu|nu|xi|pi|rho|sigma|tau)' "Greek" rwA
#  \\`!p snip.rv = match.group(1)` $0
# endsnippet

# priority 200
# context "math()"
# snippet '(?<!\\)(upsilon|phi|chi|psi|omega)' "Greek" rwA
#  \\`!p snip.rv = match.group(1)` $0
# endsnippet

# priority 200
# context "math()"
# snippet '(?<!\\)(Gamma|Delta|Theta|Lambda|Xi|Pi|Phi|Psi|Omega)' "Greek" rwA
#  \\`!p snip.rv = match.group(1)` $0
# endsnippet

context "math()"
snippet ;a "alpha" iA
 \alpha $0
endsnippet

context "math()"
snippet ;b "beta" iA
 \beta $0
endsnippet

context "math()"
snippet ;g "gamma" iA
 \gamma $0
endsnippet

context "math()"
snippet ;G "Gamma" iA
 \Gamma $0
endsnippet

context "math()"
snippet ;d "delta" iA
 \delta $0
endsnippet

context "math()"
snippet ;D "Delta" iA
 \Delta $0
endsnippet

context "math()"
snippet ;e "epsilon" iA
 \epsilon $0
endsnippet

context "math()"
snippet ;z "zeta" iA
 \zeta $0
endsnippet

context "math()"
snippet ;h "eta" iA
 \eta $0
endsnippet

context "math()"
snippet ;th "theta" iA
 \theta $0
endsnippet

context "math()"
snippet ;Th "Theta" iA
 \Theta $0
endsnippet

context "math()"
snippet ;i "iota" iA
 \iota $0
endsnippet

context "math()"
snippet ;k "kappa" iA
 \kappa $0
endsnippet

context "math()"
snippet ;l "lambda" iA
 \lambda $0
endsnippet

context "math()"
snippet ;L "Lambda" iA
 \Lambda $0
endsnippet

context "math()"
snippet ;m "mu" iA
 \mu $0
endsnippet

context "math()"
snippet ;n "nu" iA
 \nu $0
endsnippet

context "math()"
snippet ;x "xi" iA
 \xi $0
endsnippet

context "math()"
snippet ;X "Xi" iA
 \Xi $0
endsnippet

context "math()"
snippet ;pi "pi" iA
 \pi $0
endsnippet

context "math()"
snippet ;Pi "Pi" iA
 \Pi $0
endsnippet

context "math()"
snippet ;rh "rho" iA
 \rho $0
endsnippet

context "math()"
snippet ;s "sigma" iA
 \sigma $0
endsnippet

context "math()"
snippet ;S "Sigma" iA
 \Sigma $0
endsnippet

context "math()"
snippet ;ta "tau" iA
 \tau $0
endsnippet

context "math()"
snippet ;up "upsilon" iA
 \upsilon $0
endsnippet

context "math()"
snippet ;Up "Upsilon" iA
 \Upsilon $0
endsnippet

context "math()"
snippet ;ph "phi" iA
 \phi $0
endsnippet

context "math()"
snippet ;Ph "Phi" iA
 \Phi $0
endsnippet

context "math()"
snippet ;ch "chi" iA
 \chi $0
endsnippet

context "math()"
snippet ;ps "psi" iA
 \psi $0
endsnippet

context "math()"
snippet ;Ps "Psi" iA
 \Psi $0
endsnippet

context "math()"
snippet ;o "omega" iA
 \omega $0
endsnippet

context "math()"
snippet ;O "Omega" iA
 \Omega $0
endsnippet

# vim:ft=snippets:
